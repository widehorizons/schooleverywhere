def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


  def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }


android {
    compileSdkVersion 30

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    

    kotlinOptions {
        jvmTarget = '1.8'
    }
      lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false //<- add this line
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.schooleverywhere"
        
        minSdkVersion 23
        compileSdkVersion = 31
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
   buildTypes {
       release {
           signingConfig signingConfigs.release
       }
   }
      flavorDimensions "app"

    productFlavors {
           dev {
            dimension "app"
            resValue "string", "app_name", "schooleverywhere"
               applicationIdSuffix ".schooleverywhere"
        }
        alrowad {
            dimension "app"
            resValue "string", "app_name", "alrowad"
                           applicationIdSuffix ".alrowad"

        }
         tantaroyal {
            dimension "app"
            resValue "string", "app_name", "tantaroyal"
                           applicationIdSuffix ".tantaroyal.tantaroyal"

         }
     
        golden {
            dimension "app"
            resValue "string", "app_name", "golden"
                           applicationIdSuffix ".golden"

        }
        smart {
            dimension "app"
            resValue "string", "app_name", "smart"
                           applicationIdSuffix ".smart"

        }
        innovation {
            dimension "app"
            resValue "string", "app_name", "innovation"
                           applicationIdSuffix ".innovation"

        }
        merryland {
            dimension "app"
            resValue "string", "app_name", "merryland"
                           applicationIdSuffix ".merryland"

        }
        stpeter {
            dimension "app"
            resValue "string", "app_name", "stpeter"
                           applicationIdSuffix ".stpeter"

        }
     
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-inappmessaging-display:17.2.0'
}
